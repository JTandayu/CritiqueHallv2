import Head from 'next/head'
import Image from 'next/image'
import styles from "@styles/Register.module.css";
import { css, cx } from '@emotion/react'
import { motion } from "framer-motion"
import Home from './home'
import Link from 'next/link'
import Logo from "@public/critiquehall2.png";
import { Button, ButtonGroup, useColorModeValue } from "@chakra-ui/react"
import { Stack, HStack, VStack } from "@chakra-ui/react"
import { Heading } from '@chakra-ui/react'
import {
  FormControl,
  FormLabel,
  FormErrorMessage,
  FormHelperText,
} from "@chakra-ui/react"
import { ArrowRightIcon, ArrowLeftIcon, CheckIcon, InfoOutlineIcon } from '@chakra-ui/icons'
import { Select } from "@chakra-ui/react"
import { useState } from 'react';
import { Box } from '@chakra-ui/react'
import axios from 'axios';
import { createBreakpoints } from '@chakra-ui/theme-tools'
import { storage } from '../firebase.js'
import { getDownloadURL, ref, uploadBytesResumable } from 'firebase/storage'

const MotionButton = motion(Button)

function toPart2() {
  document.getElementById('part1').hidden=true;
  document.getElementById('part2').removeAttribute('hidden');
}

function toPart1() {
  document.getElementById('part2').hidden=true;
  document.getElementById('part1').removeAttribute('hidden');
}

const breakpoints = createBreakpoints({
  sm: '320px',
  md: '768px',
  lg: '960px',
  xl: '1200px',
  '2xl': '1536px',
})

export async function getStaticProps(){
  const { API_URL } = process.env
  const { API_KEY } = process.env

  const res = await fetch(`${API_URL}/api/specializations` , {
    method: 'GET',
    headers: {
        'content-type': 'multipart/form-data',
        'X-API-KEY': `${API_KEY}`,
        'Authorization': 'Basic Y2Fwc3RvbmUyMDIxOjEyMzQ=',
        // 'Accept-Encoding': 'gzip, deflate, br',
        'Accept': 'application/json',
    }
  })

  const data = await res.json()

  const res2 = await fetch(`${API_URL}/api/departments` , {
    method: 'GET',
    headers: {
        'content-type': 'multipart/form-data',
        'X-API-KEY': `${API_KEY}`,
        'Authorization': 'Basic Y2Fwc3RvbmUyMDIxOjEyMzQ=',
        // 'Accept-Encoding': 'gzip, deflate, br',
        'Accept': 'application/json',
    }
  })

  const data2 = await res2.json()

  console.log(data)
  console.log(data2)

  return{
    props: {
       data: data.specialization, 
       data2: data2.departments
    }
  }
}

export default function Register({data, data2}) {
  const { API_URL } = process.env
  const { API_KEY } = process.env

  // const first_name, last_name, email, password, confirm_password, department, specialization, profile_pic, cover_pic = useState('')
  const [first_name, setFirstName] = useState('')
  const [last_name, setLastName] = useState('')
  const [user_name, setUserName] = useState('')
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [confirm_password, setConfirmPassword] = useState('')
  const [department, setDepartment] = useState('')
  const [specialization, setSpecialization] = useState('')


    const submitRegister = async () =>{
      let formData = new FormData(); 
      formData.append('first-name', first_name);   //append the values with key, value pair
      formData.append('last_name', last_name);
      formData.append('display_name', user_name);
      formData.append('email', email);
      formData.append('password', password);
      formData.append('confirm_password', confirm_password);
      formData.append('department', department);
      formData.append('specialization', specialization);


      const config = {
        headers: { 
          'content-type': 'multipart/form-data',
          'X-API-KEY': `${API_KEY}`,
          'Authorization': 'Basic Y2Fwc3RvbmUyMDIxOjEyMzQ=',
          'Accept': 'application/json',
        }
      }

      axios.post(`${API_URL}/api/register`, formData, config)
      .then(response => {
          console.log(response);
            window.location = "/home"
      })
      .catch(error => {
          console.log(error);
          window.location = "/register"
      });

    }
  // const getSpecializations

    return (
      <div className={styles.container}>
        <Head>
          <title>Register to Critique Hall</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/logo256.png" onLoad=""/>
        </Head>
  
        <Box bg={useColorModeValue('white', '#1a202c')} w={{lg: '100ch' , md: '100%' , sm: '100%' }} className={styles.main} 
          id="motion-main" 
        >
          <center><FormControl id="registerpart1" isRequired>
          <div id="part1">
            <div className={styles.logo}>
            <Link href="/"><Image src={Logo}  alt="Critique Hall Logo"></Image></Link>
            </div>
          
            <Heading mb={2} as="h2" size="lg">Register</Heading>
            
                <FormLabel>First Name</FormLabel>
                <input className={styles.input_box} type="text" value={first_name} onChange={e => setFirstName(e.target.value)}/>
                <br/>
                <FormLabel>Last Name</FormLabel>
                <input className={styles.input_box} type="text" value={last_name} onChange={e => setLastName(e.target.value)}/>
                <br/>
                <FormLabel>Username</FormLabel>
                <input className={styles.input_box} type="text" value={user_name} onChange={e => setUserName(e.target.value)}/>
                <br/>
                <FormLabel>Email Address</FormLabel>
                <input placeholder="***@iacademy.edu.ph" className={styles.input_box} type="text" value={email} onChange={e => setEmail(e.target.value)}/>
                {/* <FormHelperText className={styles.helperText}>format: ***@iacademy.edu.ph</FormHelperText> */}
                {/* <br/> */}
              <FormLabel>Password</FormLabel>
                <input className={styles.input_box} type="password" value={password} onChange={e => setPassword(e.target.value)}/>
                <br/>
                <FormLabel>Confirm Password</FormLabel>
                <input className={styles.input_box} type="password" value={confirm_password} onChange={e => setConfirmPassword(e.target.value)}/>
                <br/>
                <VStack direction="column" spacing={8} align="center">
                <MotionButton
                  whileHover={{ scale: 1.2 }}
                  whileTap={{ scale: 0.9 }}
                  className={styles.RegisterButton} 
                  colorScheme="yellow" 
                  type="submit" 
                  size="lg"
                  rightIcon={<ArrowRightIcon />}
                  onClick={toPart2}
                  >
                Next Page
                </MotionButton>
                </VStack>
          </div>

          <div id="part2" hidden>
            <div className={styles.logo2}>
            <Link href="/"><Image src={Logo}  alt="Critique Hall Logo"></Image></Link>
            </div>
          
            <Heading mb={2} as="h2" size="lg">Register</Heading>
                <FormLabel>Department</FormLabel>
                <Select placeholder="Select Department" size="sm" onChange={e => setDepartment(e.target.value)}>

                  {data2.map(department => (
                    <option value={department.name}>{department.name}</option>
                  ))}

                {/* <option value="shs">Senior High School (SHS)</option>
                <option value="col">College (COL)</option> */}
                </Select>
                <br />
                <FormLabel>Strand or Specialization</FormLabel>
                <Select placeholder="Select Strand / Specialization" size="sm" onChange={e => setSpecialization(e.target.value)}>
                {data.map(specialization => (
                  <option value={specialization.name}>{specialization.name}</option>
                ))}
                {/* <option value="humss">SHS - Humanities and Social Sciences (HUMSS)</option>
                <option value="abm">SHS - Accountancy and Business Management (ABM)</option>
                <option value="audprod">SHS - Audio Production</option>
                <option value="mma">SHS - Media and Visual Arts with specialization in Multimedia Arts</option>
                <option value="ani">SHS - Animation</option>
                <option value="ani">SHS - Software Development</option>
                <option value="graph">SHS - Graphic Illustration</option>
                <option value="fd">SHS - Fashion Design</option>
                <option value="rob">SHS - Robotics</option>
                <option value="bscs-se">COL - BSCS - Software Engineering</option>
                <option value="bscs-ds">COL - BSCS - Data Science</option>
                <option value="bscs-ds">COL - BSCS - Cloud Computing and Network Engineering</option>
                <option value="bsemc-gd">COL - BSEMC - Game Development</option>
                <option value="bsit-wd">COL - BSIT - Web Development</option>
                <option value="bsba-mm">COL - BSBA - Marketing Management</option>
                <option value="bs-rem">COL - BS - Real Estate Management</option>
                <option value="bs-acc">COL - BS - Accountancy</option>
                <option value="ba-psy">COL - BA - Psychology</option>
                <option value="bs-ani">COL - BS - Animation</option>
                <option value="bs-mma">COL - BS - Multimedia Arts and Design</option>
                <option value="ba-fd">COL - BA - Fashion Design and Technology</option>
                <option value="ba-fvx">COL - BA - Film and Visual Effects</option>
                <option value="ba-mpsd">COL - BA - Music Production and Sound Design</option> */}
                </Select>
                <br />
                <FormLabel>Profile Picture</FormLabel>
                <HStack direction="column" spacing={5} align="center">
                <MotionButton
                  whileHover={{ scale: 1.2 }}
                  whileTap={{ scale: 0.9 }}
                  className={styles.RegisterButton} 
                  colorScheme="messenger" 
                  type="submit" 
                  size="sm"
                  >Upload Picture</MotionButton>
                  <FormHelperText>supported formats: JPEG (JPG), PNG, GIF, TIFF, and RAW.</FormHelperText>
                  </HStack>
                <br />
                <FormLabel>Cover Picture</FormLabel>
                <HStack direction="column" spacing={5} align="center">
                <MotionButton
                  whileHover={{ scale: 1.2 }}
                  whileTap={{ scale: 0.9 }}
                  className={styles.RegisterButton} 
                  colorScheme="messenger" 
                  type="submit" 
                  size="sm"
                  >Upload Picture</MotionButton>
                  <FormHelperText>supported formats: JPEG (JPG), PNG, GIF, TIFF, and RAW.</FormHelperText>
                  </HStack>
                <br />
                <HStack direction="row" spacing={8} align="center">
                <MotionButton
                  whileHover={{ scale: 1.2 }}
                  whileTap={{ scale: 0.9 }}
                  className={styles.RegisterButton} 
                  colorScheme="yellow" 
                  type="submit" 
                  size="sm"
                  leftIcon={<ArrowLeftIcon />}
                  onClick={toPart1} 
                  >
                {/* <button >Previous Page</button> */}
                Previous Page
                </MotionButton>
                <MotionButton
                  whileHover={{ scale: 1.2 }}
                  whileTap={{ scale: 0.9 }}
                  className={styles.RegisterButton} 
                  colorScheme="green" 
                  type="submit" 
                  size="lg"
                  rightIcon={<CheckIcon />}
                  >
                {/* <Link href="/home">Register</Link> */}
                <Button variant='none' onClick={submitRegister}>Register</Button>
                </MotionButton>
                </HStack>
            

            <p className={styles.register}>
              <p><Link href="./login"><a>Back to Login</a></Link></p>
            </p>
          </div>
          </FormControl></center>

        </Box>
      </div>
    )
  }